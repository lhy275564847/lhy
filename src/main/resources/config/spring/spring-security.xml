<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd">

  <!--如果都在spring容器里面，不需要引入-->
  <!--<import resource="spring-orm.xml"/>-->

  <security:http pattern="/login/in" security="none"/>
  <security:http pattern="/**/*.js" security="none"/>
  <security:http pattern="/**/*.png" security="none"/>
  <security:http pattern="/**/*.css" security="none"/>
  <security:http pattern="/**/*.gif" security="none"/>
  <security:http pattern="/**/*.html" security="none"/>
  <security:http pattern="/index.jsp" security="none"/>
  <security:http pattern="/menu2.json" security="none"/>

  <bean id="myFilterChainInterceptor" class="com.ocean.project.ssm.support.security.MyFilterChainInterceptor"/>

  <bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
    <constructor-arg>
      <bean class="com.ocean.project.ssm.support.security.login.MyLogoutSuccessHandler"/>
    </constructor-arg>
    <constructor-arg>
      <array>
        <bean id="logoutHandler" class="com.ocean.project.ssm.support.security.login.MyLogoutHandler"/>
      </array>
    </constructor-arg>
    <property name="filterProcessesUrl" value="/security_logout"/>
  </bean>

  <!--登录成功控制器 default-target-url 失效 -->
  <bean id="myAuthenticationSuccessHandler" class="com.ocean.project.ssm.support.security.login.MyAuthenticationSuccessHandler"/>
  <!--登录失败控制器 authentication-failure-url 失效-->
  <bean id="myAuthenticationFailureHandler" class="com.ocean.project.ssm.support.security.login.MyAuthenticationFailureHandler"/>

  <security:http auto-config="true" use-expressions="true">
    <security:form-login login-page="/login/in"
                authentication-success-handler-ref="myAuthenticationSuccessHandler"
                authentication-failure-handler-ref="myAuthenticationFailureHandler"
        />
    <security:logout invalidate-session="true" logout-success-url="/login/in" logout-url="/security_logout"/>

    <security:custom-filter ref="myFilterChainInterceptor" position="FIRST"/>
    <!--<security:custom-filter ref="logoutFilter" position="LOGOUT_FILTER"/>-->
    <security:custom-filter ref="filterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR"/>

    <!--session 过多,提示页面-->
    <!--<session-management session-authentication-error-url="/error.jsp">-->
    <security:session-management>
      <!--session 单点登录 error-if-maximum-exceeded 是否防止第二次登录-->
      <!--<concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />-->
      <security:concurrency-control max-sessions="1"/>
    </security:session-management>
  </security:http>

  <!-- 认证过滤器 -->
  <bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
    <!-- 用户拥有的权限 -->
    <property name="accessDecisionManager" ref="myAccessDecisionManager"/>
    <!-- 用户是否拥有所请求资源的权限 -->
    <property name="authenticationManager" ref="myAuthenticationManager"/>
    <!-- 资源与权限对应关系 -->
    <property name="securityMetadataSource" ref="mySecurityMetadataSource"/>
  </bean>

  <!-- 授权管理器 -->
  <bean id="myAccessDecisionManager" class="com.ocean.project.ssm.support.security.core.MyAccessDecisionManager"/>

  <!--自定义的切入点-->
  <bean id="mySecurityMetadataSource" class="com.ocean.project.ssm.support.security.core.MySecurityMetadataSource">
    <property name="requestMapBuilder" ref="requestMapBuilder"/>
  </bean>

  <!--自定义 资源、权限封装，进行拦截-->
  <bean id="requestMapBuilder" class="com.ocean.project.ssm.support.security.core.RequestMapBuilder">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <bean id="myUserDetailsService" class="com.ocean.project.ssm.support.security.MyUserDetailsService"/>

  <security:authentication-manager alias="myAuthenticationManager">
    <security:authentication-provider user-service-ref="myUserDetailsService"/>
    <!--<security:authentication-provider>-->
      <!--<user-service>-->
      <!--<user name="admin" password="123" authorities="ROLE_USER, ROLE_ADMIN" />-->
      <!--<user name="user" password="123" authorities="ROLE_USER" />-->
      <!--</user-service>-->
      <!--<security:jdbc-user-service data-source-ref="dataSource"-->
                         <!--users-by-username-query="-->
                          <!--select user_name as username,password,status as enabled from user where deleted=0 and user_name =?"-->
                         <!--authorities-by-username-query="-->
                          <!--select u.user_name as username,r.role_code as name-->
                          <!--from user u-->
                          <!--inner join user_role ur on u.id = ur.user_id and ur.deleted=0-->
                          <!--inner join role r on r.id = ur.role_id and r.deleted=0-->
                          <!--where u.deleted=0 and u.user_name=?"/>-->

    <!--</security:authentication-provider>-->
  </security:authentication-manager>

  <!--配置过滤器链-->
  <!--<bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">-->
    <!--<security:filter-chain-map path-type="ant">-->
      <!--<security:filter-chain pattern="/**" filters="-->
        <!--myFilterChainInterceptor,-->
        <!--filterSecurityInterceptor"/>-->
    <!--</security:filter-chain-map>-->
  <!--</bean>-->

  <bean id="currentUserAccess" class="com.ocean.project.ssm.support.core.access.CurrentUserAccessImpl"/>
</beans>
